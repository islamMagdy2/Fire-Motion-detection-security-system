/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package security_sys;

/**
 *
 * @author islammagdy
 */
import java.awt.Color;
import static java.lang.Thread.sleep;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import jssc.*;

public class AppDesign extends javax.swing.JFrame {

    /**
     * Creates new form AppDesign
     */
    private SerialPort port = null;
    private String recivedData = "";

    private boolean alarm = false;

    public AppDesign() {
        initComponents();
        refresh();
        state.setForeground(Color.red);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        portsList = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        state = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        readBox = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 2, 12)); // NOI18N
        jLabel1.setText("Security System");

        portsList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portsListActionPerformed(evt);
            }
        });

        jLabel2.setText("State :-");

        state.setText("System is inactive");

        jButton1.setText("Connect");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Deactivate");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Refresh");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        readBox.setEditable(false);
        readBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readBoxActionPerformed(evt);
            }
        });

        jButton5.setText("Read");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Activate");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(portsList, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)))
                .addGap(26, 26, 26)
                .addComponent(state, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(readBox, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jButton5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(state, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(portsList, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton6))
                .addGap(77, 77, 77)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(readBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void portsListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portsListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_portsListActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        refresh();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    public void test() {
        try {
            recivedData = "";

            sleep(100);
            port.writeString("@R35000;");
            sleep(200);

        } catch (SerialPortException | InterruptedException ex) {
            Logger.getLogger(AppDesign.class.getName()).log(Level.SEVERE, null, ex);
        }
        readBox.setText(recivedData);
        if (recivedData.equals("") == false) {
            try {
                char check[] = recivedData.toCharArray();
                System.out.println(check[0]);
                System.out.println(check[1]);
                System.out.println(check[2]);
                if (check[1] == '0' && check[2] == '8') {
                    FireAlert();
                    System.out.println("Fire .. fire");
                }
                else if (check[1] == '0' && check[2] == '7') {
                    for (int i = 0; i < 10; i++) {
                        port.writeString("@W370;");
                        sleep(50);
                    }
                }
                else if(check[1]=='1' && check[2]=='6'){
                 motionAler();   
            }
            } catch (ArrayIndexOutOfBoundsException E) {

            } catch (SerialPortException | InterruptedException ex) {
                Logger.getLogger(AppDesign.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }


    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            recivedData = "";

            sleep(100);
            port.writeString("@R35000;");
            sleep(200);

        } catch (SerialPortException | InterruptedException ex) {
            Logger.getLogger(AppDesign.class.getName()).log(Level.SEVERE, null, ex);
        }
        readBox.setText(recivedData);
        if (recivedData.equals("") == false) {
            try {
                char check[] = recivedData.toCharArray();
                System.out.println(check[0]);
                System.out.println(check[1]);
                System.out.println(check[2]);
                if (check[1] == '0' && check[2] == '8') {
                    while (alarm == false) {
                        FireAlert();
                    }

                    System.out.println("Fire .. fire");
                }
            } catch (ArrayIndexOutOfBoundsException E) {

            }

        }

        /* if(num > 0){
                FireAlert();
            }*/

    }//GEN-LAST:event_jButton5ActionPerformed

    private void readBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_readBoxActionPerformed

    private void checker() {
        for (int i = 0; i < 100; i++) {
            if (alarm) {
                test();
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AppDesign.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        connect();


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        alarm = false;
        disconnect();

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        checker();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AppDesign().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> portsList;
    private javax.swing.JTextField readBox;
    private javax.swing.JLabel state;
    // End of variables declaration//GEN-END:variables

    private void refresh() {
        String[] ports = SerialPortList.getPortNames();
        portsList.removeAllItems();
        for (String p : ports) {
            portsList.addItem(p);

        }
    }

    private void connect() {
        port = new SerialPort((String) portsList.getSelectedItem());

        try {
            if (!port.isOpened()) {
                port.openPort();
                port.setParams(2400,
                        SerialPort.DATABITS_8,
                        SerialPort.STOPBITS_1,
                        SerialPort.PARITY_NONE);
                state.setText("System is active");
                state.setForeground(Color.GREEN);
                port.writeString("@W367;");
                sleep(100);
                port.setEventsMask(SerialPort.MASK_RXCHAR);
                port.addEventListener(new recived_data_handler());
                sleep(500);
                alarm = true;
            }

        } catch (SerialPortException ex) {
            JOptionPane.showMessageDialog(rootPane, ex);

        } catch (InterruptedException ex) {
            Logger.getLogger(AppDesign.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void disconnect() {
        try {
            if (port.isOpened()) {
                port.closePort();
                state.setText("System is inactive");
                state.setForeground(Color.red);
                alarm = false;
            }
        } catch (SerialPortException e) {
            JOptionPane.showMessageDialog(rootPane, "Error .. " + e);
        }
    }

    private void FireAlert() {
        if (port == null) {
            JOptionPane.showMessageDialog(rootPane, "System isn't connected.. error !!");
        } else {

            try {

                for (int i = 0; i < 100; i++) {
                    port.writeString("@W377;");
                    sleep(1000);
                    port.writeString("@W371;");
                    sleep(500);
                    checker();
                }
                
                sleep(50);

                alarm = true;

            } catch (SerialPortException | InterruptedException ex) {
                Logger.getLogger(AppDesign.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    private void motionAler() {
          if (port == null) {
            JOptionPane.showMessageDialog(rootPane, "System isn't connected.. error !!");
        } else {

            try {

                for (int i = 0; i < 100; i++) {
                    port.writeString("@W376;");
                    sleep(2000);
                    port.writeString("@W370;");
                    sleep(100);
                }
                sleep(50);

                alarm = true;

            } catch (SerialPortException | InterruptedException ex) {
                Logger.getLogger(AppDesign.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    public class recived_data_handler implements SerialPortEventListener {

        // concept of interrupt
        /**
         *
         * @param spe
         */
        @Override
        public void serialEvent(SerialPortEvent spe) {

            try {
                String temp = port.readString();

                if (temp != null) {
                    if (temp.contains(">")) {
                        recivedData += temp.substring(temp.indexOf(">") + 1);
                    } else {
                        recivedData += temp;
                    }

                }

            } catch (SerialPortException ex) {
                JOptionPane.showMessageDialog(rootPane, ex);
            }
        }

    }

}
